#!/usr/bin/env python3

"""
–ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import requests
import json

# –í–∞—à OpenAI API –∫–ª—é—á
OPENAI_KEY = "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"

def test_1_backend_health():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è backend"""
    print("üîÑ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ backend...")
    try:
        response = requests.get("https://ai-coding-51ss.onrender.com/api/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Backend –∑–¥–æ—Ä–æ–≤!")
            print(f"   üìä –í–µ—Ä—Å–∏—è: {data.get('version')}")
            print(f"   ü§ñ –ú–æ–¥–µ–ª–∏: {data.get('supported_models', {}).get('openai', [])}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gpt-3.5-turbo –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            if 'gpt-3.5-turbo' in data.get('supported_models', {}).get('openai', []):
                print("   ‚úÖ –ú–æ–¥–µ–ª—å gpt-3.5-turbo –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø!")
                return True
            else:
                print("   ‚ùå –ú–æ–¥–µ–ª—å gpt-3.5-turbo –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
                return False
        else:
            print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_2_cors():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS"""
    print("\nüîÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS...")
    try:
        response = requests.get(
            "https://ai-coding-51ss.onrender.com/api/cors-test",
            headers={"Origin": "https://kodix.netlify.app"},
            timeout=10
        )
        if response.status_code == 200:
            print("   ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            return True
        else:
            print(f"   ‚ùå CORS –ø—Ä–æ–±–ª–µ–º–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_3_frontend():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend"""
    print("\nüîÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend...")
    try:
        response = requests.get("https://kodix.netlify.app/", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ Frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            return True
        else:
            print(f"   ‚ùå Frontend –ø—Ä–æ–±–ª–µ–º–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_4_session_creation():
    """–¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å gpt-3.5-turbo"""
    print("\nüîÑ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –†–ï–ê–õ–¨–ù–´–ú API –∫–ª—é—á–æ–º...")
    try:
        payload = {
            "task": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Hello World",
            "project_name": "HelloWorldTest",
            "model_type": "gpt-3.5-turbo",  # –ö–†–ò–¢–ò–ß–ù–û! –≠—Ç–æ –±—ã–ª–æ —Å–ª–æ–º–∞–Ω–æ
            "api_key": OPENAI_KEY,
            "provider": "openai"
        }
        
        response = requests.post(
            "https://ai-coding-51ss.onrender.com/api/sessions",
            json=payload,
            timeout=30
        )
        
        print(f"   üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üÜî Session ID: {data.get('session_id')}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_5_openai_direct():
    """–¢–µ—Å—Ç 5: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OpenAI API"""
    print("\nüîÑ –¢–µ—Å—Ç 5: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OpenAI...")
    try:
        import openai
        
        client = openai.OpenAI(api_key=OPENAI_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
            max_tokens=20
        )
        
        print(f"   ‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   üí¨ –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:50]}...")
        return True
        
    except Exception as e:
        print(f"   ‚ùå OpenAI –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=" * 60)
    print("üöÄ –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô CHATDEV WEB")
    print("=" * 60)
    
    tests = [
        test_1_backend_health,
        test_2_cors,
        test_3_frontend,
        test_4_session_creation,
        test_5_openai_direct
    ]
    
    results = []
    for test in tests:
        results.append(test())
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print("=" * 60)
    
    test_names = [
        "Backend Health",
        "CORS Setup", 
        "Frontend Loading",
        "Session Creation (gpt-3.5-turbo)",
        "Direct OpenAI API"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
        print(f"{i+1}. {name}: {status}")
    
    passed = sum(results)
    total = len(results)
    
    print(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–Æ! –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ https://kodix.netlify.app/ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ!")
        print("üîë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å gpt-3.5-turbo")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        print("üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è")
        return 1

if __name__ == "__main__":
    exit(main())